{"version":3,"sources":["utils/localDB.js","reducers/list.js","reducers/search.js","reducers/index.js","store/store.js","components/Search.js","containers/SearchContainer.js","actions/SearchActions.js","components/List.js","containers/ListContainer.js","actions/ListActions.js","components/AddItem.js","containers/AddItemContainer.js","App.js","serviceWorker.js","index.js"],"names":["localDB","arr","localStorage","phoneList","JSON","stringify","initialState","test","items","id","name","phone","parse","filteredItems","errors","query","rootReducer","combineReducers","list","state","action","type","payload","trim","double","find","item","form","Object","keys","length","status","splice","findIndex","parseInt","search","store","createStore","Search","onChange","e","props","setQuery","target","value","console","log","Fragment","autoComplete","defaultValue","this","placeholder","React","Component","SearchContainer","className","connect","dispatch","List","handleClick","removeItem","str","__html","map","key","dangerouslySetInnerHTML","createMarkup","onClick","ListContainer","time","forEach","ind","toLowerCase","indexOf","tmpArr","split","push","join","replace","timeEnd","AddItem","submit","preventDefault","addItem","Date","now","onSubmit","AddItemContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a42c2604.chunk.js","sourcesContent":["export const localDB = {\r\n  getItems : () => {\r\n    if(typeof localStorage.phoneList === 'undefined') {\r\n      localStorage.phoneList = JSON.stringify([\r\n        {id: 1, name: 'ivan', phone:'+7(912)123-45-67'},\r\n        {id: 2, name: 'petr', phone:'+7-912-333-333-33'},\r\n        {id: 3, name: 'roman', phone:'8912123456'},\r\n      ]);\r\n    }\r\n    return JSON.parse(localStorage.phoneList);\r\n  },\r\n\r\n  saveItems : (arr) => {\r\n    localStorage.phoneList = JSON.stringify( arr );\r\n  }\r\n}","import { localDB } from '../utils/localDB'\r\n\r\nconst initialState = {\r\n  test: 'list test',\r\n  items: localDB.getItems(),\r\n  filteredItems: [],\r\n  errors: {}\r\n}\r\n\r\nexport const list = (state=initialState, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_ITEM':\r\n      action.payload.name = action.payload.name.trim();\r\n      action.payload.phone = action.payload.phone.trim();\r\n      let errors = {};\r\n      state.errors = {};\r\n\r\n      // проверка на дубли\r\n      let double = state.items.find((item)=>{\r\n        return item.name===action.payload.name || item.phone===action.payload.phone;\r\n      });\r\n      if(double) {\r\n        errors.form = \"запись с таким именем или номером уже существует\";\r\n      }\r\n\r\n      //проверка на заполненность имени и телефона\r\n      if(!action.payload.name) errors.name = \"не заполнено имя\";\r\n      if(!action.payload.phone) errors.phone = \"не заполнен телефон\";\r\n\r\n      //возвращаем ошибки\r\n      if(Object.keys(errors).length>0) return {...state, errors};\r\n\r\n      //если нет ошибок - создаем новую запись\r\n      localDB.saveItems([...state.items, ...[action.payload]]);\r\n      return {...state, items: [...state.items, ...[action.payload]], status: 'success' };\r\n\r\n    case 'REMOVE_ITEM':\r\n      state.items.splice(state.items.findIndex((item)=>item.id===parseInt(action.payload)),1);\r\n      localDB.saveItems(state.items);\r\n      return {...state, items: state.items };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","const initialState = {\r\n  test: 'search test',\r\n  query: ''\r\n}\r\n\r\nexport const search = (state=initialState, action) => {\r\n  switch (action.type) {\r\n    case 'SEARCH':\r\n      return { ...state, query: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { list } from './list'\r\nimport { search } from './search'\r\nimport { combineReducers } from 'redux'\r\n\r\nexport const rootReducer=combineReducers({\r\n  list: list,\r\n  search: search\r\n})","import { createStore } from 'redux'\r\nimport { rootReducer } from '../reducers';\r\n\r\n\r\nexport const store = createStore(rootReducer);\r\n","import React from 'react'\r\n//import PropTypes from 'prop-types'\r\n\r\nexport class Search extends React.Component {\r\n  onChange = (e) => {\r\n    this.props.setQuery(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    console.log(\"Search render\");\r\n    return (\r\n      <React.Fragment>\r\n        <input type=\"text\" name=\"query\"  autoComplete=\"off\" defaultValue={this.props.query} onChange={this.onChange}  placeholder=\"Поиск по имени или номеру\" />\r\n      </React.Fragment>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nSearch.propTypes = {}","import React from 'react';\nimport { connect } from 'react-redux'\nimport { Search } from '../components/Search'\nimport { setQuery } from '../actions/SearchActions'\n\n\nclass SearchContainer extends React.Component {\n  render () {\n    console.log(\"SearchContainer render\", this.props);\n    const {search,setQuery} = this.props;\n    return (\n      <div className=\"phone-search-container\">\n        <Search query={search.query} setQuery={setQuery} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = store => {\n  return {\n    search: store.search\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setQuery: (query) => dispatch(setQuery(query))\n  }\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(SearchContainer);\n","export const setQuery = (query) => ({\r\n  type: 'SEARCH',\r\n  payload: query,\r\n});","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class List extends React.Component {\r\n  handleClick = (id) => {\r\n    console.log(id, this.props.removeItem);\r\n    this.props.removeItem(id);\r\n  }\r\n\r\n  createMarkup(str) {\r\n    return {__html: str};\r\n  }\r\n\r\n  render() {\r\n    console.log(\"list render\");\r\n    return (\r\n      <React.Fragment>\r\n        <h3>{this.props.test}</h3>\r\n        <div className=\"phone-list\">\r\n          {\r\n            this.props.filteredItems.map((item)=>\r\n              <div className=\"item\" key={item.id}>\r\n                <span dangerouslySetInnerHTML={this.createMarkup(item.name)} className=\"name\" />\r\n                -\r\n                <span dangerouslySetInnerHTML={this.createMarkup(item.phone)} className=\"phone\" />\r\n                 (<span className=\"remove\" onClick={()=>this.handleClick(item.id)}>x</span>)\r\n              </div>\r\n            )\r\n          }\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nList.propTypes = {\r\n  test: PropTypes.string.isRequired,\r\n  filteredItems: PropTypes.array.isRequired,\r\n}","import React from 'react';\nimport { connect } from 'react-redux'\nimport { List } from '../components/List'\nimport { removeItem } from '../actions/ListActions'\n\n\nclass ListContainer extends React.Component {\n  render () {\n    console.log(\"ListContainer render\", this.props);\n    const {list, removeItem} = this.props;\n    return (\n      <div className=\"phone-list-container\">\n        <List\n          filteredItems={list.filteredItems}\n          removeItem={removeItem}\n          test={list.test}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = store => {\n  let filteredItems = false;\n  if(store.search.query) {\n    store.search.query = store.search.query.trim();\n    console.time(\"filtered\");\n    filteredItems = [];\n    store.list.items.forEach((item)=>{\n      let ind = item.name.toLowerCase().indexOf(store.search.query.toLowerCase());\n      if(ind > -1) {\n        let tmpArr = item.name.split('');\n        tmpArr.splice(ind,0,'<b>');\n        tmpArr.splice(ind+store.search.query.length+1,0,'</b>');\n        filteredItems.push({...item, name:tmpArr.join('')});\n      }\n\n      ind = item.phone.toLowerCase().replace(/[^0-9]/gim,'').indexOf(store.search.query.toLowerCase());\n      if( ind >-1 ) {\n        //let tmpArr = item.phone.split('');\n        //tmpArr.splice(ind,0,'<b>');\n        //tmpArr.splice(ind+store.search.query.length+1,0,'</b>');\n        //filteredItems.push({...item, phone:tmpArr.join('')});\n        filteredItems.push(item);\n      }\n    });\n    console.timeEnd(\"filtered\");\n  }\n  store.list.filteredItems = filteredItems || store.list.items;\n\n  return {\n    list: store.list,\n    search: store.search\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    removeItem: (id) => dispatch(removeItem(id))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListContainer);\n","export const addItem = (item) => ({\r\n  type: 'ADD_ITEM',\r\n  payload: item,\r\n});\r\n\r\nexport const removeItem = (id) => ({\r\n  type: 'REMOVE_ITEM',\r\n  payload: id,\r\n})","import React from 'react'\r\n\r\nexport class AddItem extends React.Component {\r\n  submit = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.props.addItem({\r\n      id: Date.now(),\r\n      name: e.target.name.value,\r\n      phone: e.target.phone.value\r\n    });\r\n\r\n    e.target.name.value = '';\r\n    e.target.phone.value = '';\r\n  }\r\n\r\n  render() {\r\n    console.log(\"AddItem render\");\r\n    const {errors} = this.props;\r\n\r\n    return (\r\n      <form action=\"\" onSubmit={this.submit}>\r\n        <input type=\"text\" name=\"name\" autoComplete=\"off\" placeholder=\"Имя\" className={(errors.name ? \"error\" : \"\")} />\r\n        <input type=\"tel\" name=\"phone\" autoComplete=\"off\" placeholder=\"Телефон\" className={(errors.phone ? \"error\" : \"\")}/>\r\n        <input type=\"submit\" value=\"Добавить запись\"/>\r\n        {(errors.form) ? <div className=\"form-error\">{errors.form}</div> : ''}\r\n      </form>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport { AddItem } from '../components/AddItem'\nimport { addItem } from '../actions/ListActions'\n\n\nclass AddItemContainer extends React.Component {\n  render () {\n    console.log(\"AddItemContainer render\", this.props);\n    const {addItem, errors} = this.props;\n    return (\n      <div className=\"phone-actions-container\">\n        <AddItem addItem={addItem} errors={errors} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = store => {\n  return {\n    errors: store.list.errors\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addItem: (item) => dispatch(addItem(item))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddItemContainer);\n","import React from 'react';\r\nimport SearchContainer from './containers/SearchContainer'\r\nimport ListContainer from './containers/ListContainer'\r\nimport AddItemContainer from './containers/AddItemContainer'\r\n\r\n\r\nclass App extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1 className=\"App-title\">Телефонная книга</h1>\r\n        </header>\r\n        <main>\r\n          <SearchContainer />\r\n\r\n          <div className=\"middle\">\r\n            <ListContainer />\r\n            <AddItemContainer />\r\n          </div>\r\n\r\n        </main>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store'\nimport App from './App'\n\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}